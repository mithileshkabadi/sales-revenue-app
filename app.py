# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1njDqh5vGrixX9hFe4uXFzMDwtBDpNQgC
"""

import streamlit as st
import pickle
import numpy as np

# Load the trained model
with open("xgboost_sales_model.pkl", "rb") as file:
    model = pickle.load(file)

# Streamlit UI
st.title("Sales Revenue Prediction Dashboard")
st.write("Enter the values to predict revenue.")

# User input fields
unit_price = st.number_input("Unit Price ($)", min_value=0.0, value=10.0)
quantity = st.number_input("Quantity", min_value=1, value=1)
shipping_fee = st.number_input("Shipping Fee ($)", min_value=0.0, value=5.0)

# Categorical inputs
category = st.selectbox("Product Category", ["Electronics", "Accessories", "Wearables", "Unknown"])
region = st.selectbox("Region", ["North", "South", "East", "West", "Unknown"])
shipping_status = st.selectbox("Shipping Status", ["Pending", "Delivered", "Returned", "Unknown"])

# ✅ One-hot encode categories exactly as done in training
category_encoded = [
    1 if category == "Electronics" else 0, 
    1 if category == "Accessories" else 0,  
    1 if category == "Wearables" else 0,  
    1 if category == "Unknown" else 0  
]

region_encoded = [
    1 if region == "North" else 0, 
    1 if region == "South" else 0, 
    1 if region == "East" else 0, 
    1 if region == "West" else 0,  
    1 if region == "Unknown" else 0  
]

shipping_status_encoded = [
    1 if shipping_status == "Pending" else 0, 
    1 if shipping_status == "Delivered" else 0,  
    1 if shipping_status == "Returned" else 0,  
    1 if shipping_status == "Unknown" else 0  
]

# Button to predict revenue
if st.button("Predict Revenue"):
    # ✅ Ensure total input features = model's expected input shape
    input_data = np.array([[unit_price, quantity, shipping_fee] + category_encoded + region_encoded + shipping_status_encoded])

    # Predict
    prediction = model.predict(input_data)[0]

    # Show prediction
    st.success(f"Predicted Total Price: ${prediction:.2f}")
